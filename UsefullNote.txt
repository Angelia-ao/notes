





thinkPhp

  location / {
        index  index.php;
        if (!-e $request_filename) {
            rewrite ^/(.*)$ /index.php/$1 last;
        }
    }

    location ~ ^/.+\.php {
        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
        fastcgi_index  index.php;
        fastcgi_split_path_info ^(.+\.php)(/?.+)$;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;
        include        fastcgi_params;
        fastcgi_pass   127.0.0.1:9000;
    }


At 2016-01-06 17:19:34 
var_dump(01090); 
hexadecimal : 0[xX][0-9a-fA-F]+
octal       : 0[0-7]+
binary      : 0b[01]+
Note: string 最大可以达到 2GB。
Heredoc 结构 
要注意的是结束标识符这行除了可能有一个分号（;）外，绝对不能包含其它字符。
在 PHP 5.3.0 以后，也可以用 Heredoc 结构来初始化静态变量和类的属性和常量：
<?php
echo <<<"FOOBAR"
Hello World!
FOOBAR;
?>
也可以把 Heredoc 结构用在函数参数中来传递数据：
Nowdoc 结构
就象 heredoc 结构类似于双引号字符串，Nowdoc 结构是类似于单引号字符串的。Nowdoc 结构很象 heredoc 结构，但是 nowdoc 中不进行解析操作。
$str = <<<'EOT'
My name is "$name". I am printing some $foo->foo.
Now, I am printing some {$foo->bar[1]}.
EOT;
Nowdoc 结构是在 PHP 5.3.0 中加入的。

echo "This is the value of the var named $name: {${$name}}";
echo "This is the value of the var named by the return value of getName(): {${getName()}}";
echo "This is the value of the var named by the return value of \$object->getName(): {${$object->getName()}}";

// 有效，输出： I'd like an A & W
echo "I'd like an {${beers::softdrink}}\n";

// 也有效，输出： I'd like an Alexander Keith's
echo "I'd like an {${beers::$ale}}\n";

自 PHP 5.4 起字符串下标必须为整数或可转换为整数的字符串，否则会发出警告。之前例如 "foo" 的下标会无声地转换成 0。
用 [] 或 {} 访问任何其它类型（不包括数组或具有相应接口的对象实现）的变量只会无声地返回 NULL。

get_class()

NULL 总是被转变成空字符串。

bool isset ( mixed $var [, mixed $... ] )
检测变量是否设置，并且不是 NULL。

如果已经使用 unset() 释放了一个变量之后，它将不再是 isset()。若使用 isset() 测试一个被设置成 NULL 的变量，将返回 FALSE。同时要注意的是一个 NULL 字节（"\0"）并不等同于 PHP 的 NULL 常数。








Zend Opcache
mysql mysqli
scss
Memache
Xcache
eAccelerator
APC
rocksdb 
Phpspec
BDD
PhpStore
YACC Parser

MySQL Commend Syntax 

MYSQL union 如链接的两个查询结果有重复则会合并
left join where条件在右边时，条件写在join中

https://github.com/beecloud/beecloud-php

a man-in-the-middle attack
composer diagnose

composer update --prefer-dist



jk_daily_sales jk_goods jk_group jk_group_member jk_group_storage jk_inout_detail jk_inout_order jk_sales_audit


mysqldump -uroot -p -d jke_sale jk_daily_sales jk_goods jk_group jk_group_member jk_group_storage jk_inout_detail jk_inout_order jk_sales_audit  --dump-date --add-drop-table --result-file=/d/sqlLog/test/s/dump-jks.sql

mysqldump -uroot -p -d jke_sale jk_daily_sales jk_goods jk_group jk_group_member jk_group_storage jk_inout_detail jk_inout_order jk_sales_audit  --dump-date --add-drop-table --result-file=/d/sqlLog/test/s/dump-jks.sql



adm_actions
adm_actions_role
adm_admins
adm_admins_options
adm_area
adm_category
adm_roles


mysqldump -uroot -p adm_actions adm_actions_role  adm_admins adm_admins_options  adm_area  adm_category  adm_roles --dump-date --add-drop-table --result-file=/d/sqlLog/test/s/dump-jks.sql


mysqldump -uroot -p -d xb28 --tabels xb_*  --dump-date --add-drop-table --result-file=D:\dump.sql
mysqldump --opt db_name | mysql --host=remote_host -C db_name
mysqldump -uroot -p -d xb28 xb_company  --dump-date --add-drop-table --result-file=D:\dump.sql



INSERT INTO mysql.`user` (`host`,`user`,`password`)VALUES('localhost','services',PASSWORD('KCqcjuU2EjT8u0ZN'));

GRANT ALL privileges ON zhaoxinbao.* TO 'services'@'localhost' IDENTIFIED BY 'KCqcjuU2EjT8u0ZN'
REVOKE ALL privileges ON zhaoxinbao.* FROM 'services'@'localhost' IDENTIFIED BY 'KCqcjuU2EjT8u0ZN'
FLUSH PRIVILEGES



#
-- 
/* ... */
/*! MySQL-specific code */

产生BUG池，记录每个BUG的分数，超出预警值，发送短信，设置发送等级（）
程序健壮性

net view
arp -a
candao-PC MAC
78-24-af-9c-93-71

http://www.phpspec.net/en/latest/manual/introduction.html#
SELECT TABLE_NAME,DATA_LENGTH+INDEX_LENGTH,TABLE_ROWS FROM TABLES WHERE TABLE_SCHEMA='数据库名' AND TABLE_NAME='表名'

67b1beb7ea47f20ab70c87e4bffd6af24fe1fdf6

laravel 
多表update 与 timestamp 有冲突，问题为updated_at指向不明


netsh interface ip set address "本地连接" static 192.168.0.1 255.255.255.0 192.168.0.254

netsh interface ip set address "本地连接" static 65.10.0.1 255.0.0.0 

netsh interface ip set address name="本地连接" source=dhcp


php5.6
1.const opreation
2.arguments ...
    function name($a,...$argus);

    function add($x,$y,$z);
    $numbers = [1,2,6];
    add(...$numbers);
3. namspace use
namespace Laracasts {
    const TAX = .09;
    function sayHi(){ echo 'Hi';}
}
namespace {
    use function Laracasts\sayHi;
    use const Laracats\TAX;

    echo TAX;

    sayHi();xs
}

Illuminate\Contracts\Console\Kernel

    set 1-xb-login "{\"timestamp\":1447836496,\"token\":\"1\"}"

https://github.com/indatus/dispatcher
 redis-server.exe redis-2.8.3/redis.conf


show binlog events;
查看指定binlog文件的内容

show binlog events in 'mysql-bin.000002';
查看当前正在写入的binlog文件

show master status\G
获取binlog文件列表

show binary logs;

mysql -hrdsuf5mqwljzynpys5pwp.mysql.rds.aliyuncs.com -ugzb_admin -pGZB_mysqldata1024
最好在加一个IP限制请求

mysql-bin.000185

mysqlbinlog -u username -p password -hl-db1.dba.beta.cn6.qunar.com -P3306 \
--read-from-remote-server --start-datetime='2013-09-10 23:00:00' --stop-datetime='2013-09-10 23:30:00' mysql-bin.000001 > t.binlog

mysqlbinlog --start-datetime="2015-09-09 09:00:00" --stop-datetime="2015-09-09 09:37:00" D:/wnmp/mysql/binlog/logbin.000001

mysqlbinlog -udmin -pGZ024 -hrdsuncs.com -P3306 \
--read-from-remote-server --base64-output=decode-rows -v --start-datetime='2015-09-18 09:15:00' --stop-datetime='2015-09-18 09:40:00' mysql-bin.000184 > t.txt


mysqlbinlog --start-datetime="2015-10-08 14:00:00" --stop-datetime="2015-10-08 14:30:00" D:/wnmp/mysql/binlog/logbin.000026

mysqlbinlog -uroot -p82c4466565 --start-datetime="2015-10-26 09:00:00" --stop-datetime="2015-10-26 16:00:00" mysql-bin.000003

mysqlbinlog -uroot -p7aa8ce1a9c --start-datetime="2015-11-23 09:00:00" --stop-datetime="2015-11-24 16:00:00" mysql-bin.000006

mysql -uroot -p7c

工厂模式
Factory2.php
<?php
interface IUser
{
  function getName();
}

class User implements IUser
{
  public function __construct( $id ) { }

  public function getName()
  {
    return "Jack";
  }
}

class UserFactory
{
  public static function Create( $id )
  {
    return new User( $id );
  }
}

$uo = UserFactory::Create( 1 );
echo( $uo->getName()."\n" );
?>

单例模式
Singleton.php
<?php
require_once("DB.php");

class DatabaseConnection
{
  public static function get()
  {
    static $db = null;
    if ( $db == null )
      $db = new DatabaseConnection();
    return $db;
  }

  private $_handle = null;

  private function __construct()
  {
    $dsn = 'mysql://root:password@localhost/photos';
    $this->_handle =& DB::Connect( $dsn, array() );
  }
  
  public function handle()
  {
    return $this->_handle;
  }
}

print( "Handle = ".DatabaseConnection::get()->handle()."\n" );
print( "Handle = ".DatabaseConnection::get()->handle()."\n" );
?>

观察者模式
 Observer.php
<?php
interface IObserver
{
  function onChanged( $sender, $args );
}

interface IObservable
{
  function addObserver( $observer );
}

class UserList implements IObservable
{
  private $_observers = array();

  public function addCustomer( $name )
  {
    foreach( $this->_observers as $obs )
      $obs->onChanged( $this, $name );
  }

  public function addObserver( $observer )
  {
    $this->_observers []= $observer;
  }
}

class UserListLogger implements IObserver
{
  public function onChanged( $sender, $args )
  {
    echo( "'$args' added to user list\n" );
  }
}

$ul = new UserList();
$ul->addObserver( new UserListLogger() );
$ul->addCustomer( "Jack" );
?>

命令链模式
Chain.php
<?php
interface ICommand
{
  function onCommand( $name, $args );
}

class CommandChain
{
  private $_commands = array();

  public function addCommand( $cmd )
  {
    $this->_commands []= $cmd;
  }

  public function runCommand( $name, $args )
  {
    foreach( $this->_commands as $cmd )
    {
      if ( $cmd->onCommand( $name, $args ) )
        return;
    }
  }
}

class UserCommand implements ICommand
{
  public function onCommand( $name, $args )
  {
    if ( $name != 'addUser' ) return false;
    echo( "UserCommand handling 'addUser'\n" );
    return true;
  }
}

class MailCommand implements ICommand
{
  public function onCommand( $name, $args )
  {
    if ( $name != 'mail' ) return false;
    echo( "MailCommand handling 'mail'\n" );
    return true;
  }
}

$cc = new CommandChain();
$cc->addCommand( new UserCommand() );
$cc->addCommand( new MailCommand() );
$cc->runCommand( 'addUser', null );
$cc->runCommand( 'mail', null );
?>


策略模式
Strategy.php
<?php
interface IStrategy
{
  function filter( $record );
}

class FindAfterStrategy implements IStrategy
{
  private $_name;

  public function __construct( $name )
  {
    $this->_name = $name;
  }

  public function filter( $record )
  {
    return strcmp( $this->_name, $record ) <= 0;
  }
}

class RandomStrategy implements IStrategy
{
  public function filter( $record )
  {
    return rand( 0, 1 ) >= 0.5;
  }
}

class UserList
{
  private $_list = array();

  public function __construct( $names )
  {
    if ( $names != null )
    {
      foreach( $names as $name )
      {
        $this->_list []= $name;
      }
    }
  }

  public function add( $name )
  {
    $this->_list []= $name;
  }

  public function find( $filter )
  {
    $recs = array();
    foreach( $this->_list as $user )
    {
      if ( $filter->filter( $user ) )
        $recs []= $user;
    }
    return $recs;
  }
}

$ul = new UserList( array( "Andy", "Jack", "Lori", "Megan" ) );
$f1 = $ul->find( new FindAfterStrategy( "J" ) );
print_r( $f1 );

$f2 = $ul->find( new RandomStrategy() );
print_r( $f2 );
?>
